// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  accounts      Account[]
  sessions      Session[]
  sentLikes     Like[]    @relation("SentLikes")
  receivedLikes Like[]    @relation("ReceivedLikes")
  messages      Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  birthdate   DateTime?
  gender      String?
  location    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  musicPreferences MusicPreference[]
  userImages  UserImage[]
}

model UserImage {
  id        String   @id @default(cuid())
  profileId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model MusicPreference {
  id        String   @id @default(cuid())
  profileId String
  type      String   // "genre" or "artist"
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Like {
  id          String   @id @default(cuid())
  fromUserId  String
  toUserId    String
  isMatch     Boolean  @default(false)
  createdAt   DateTime @default(now())

  fromUser    User     @relation("SentLikes", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("ReceivedLikes", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(cuid())
  content     String
  fromUserId  String
  toUserId    String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())

  fromUser    User     @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("ReceivedMessages", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

